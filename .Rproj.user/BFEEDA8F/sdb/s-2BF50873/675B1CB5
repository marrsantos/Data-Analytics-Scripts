{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Safran challenge\"\noutput: html_notebook\n---\n\nAuthor: \"Marcelo Santos\"\nDate: 05/04/2018\n\nReading datasets\n\n```{r}\ndata_folder <- paste(getwd(), '/./Safran/', sep='')\ndfflights <- read.csv(paste(data_folder,\"flights.csv\",sep=''), sep=',', header=T)\ndfweather <- read.csv(paste(data_folder,\"weather.csv\",sep=''), sep=',', header=T)\n```\n\nLibraries\n```{r}\nlibrary(dplyr)\nlibrary(DAAG)\n```\n\n**********************************************************************************************    \n### Answer for items #1 and #2\n\nPreparing Flights and Weather datasets\n\n```{r}\n#Analysing Flights dataset looking for NAs\n(summary(dfflights))\n# Analysing data types\n(str(dfflights))\n```\n\nFormating dates and removing outliers\n```{r}\n# preparing dates\ndfflights$date<-as.POSIXct(dfflights$date, format=\"%Y-%m-%d\")\n# removing instances without date\ndfflights<-subset(dfflights,!is.na(date))\n# duration > 0 and < 6h\ndfflights<-subset(dfflights, duration>0 & duration<=6)\n# number of passengers <= 150 but keeping NAs\ndfflights<-subset(dfflights, number_passengers<=150|is.na(number_passengers))\n```\n\nPreliminary boxplot analysis\n\n```{r}\nboxplot(dfflights$duration~format(dfflights$date,\"%m\"), xlab=\"Months\", ylab=\"Duration\", main='Flights duration analysis')\n```\n\n\nAnalysing dataset looking for NAs\n\n```{r}\n(summary(dfweather))\n# Analysing data types\n(str(dfweather))\n```\n\n```{r}\n# preparing dates\ndfweather$date<-as.POSIXct(dfweather$date, format=\"%Y-%m-%d\")\n# removing instances without date\ndfweather<-subset(dfweather,!is.na(date))\n# temperature >= -30 and <= 42\ndfweather<-subset(dfweather,temperature>=-30 & temperature<=42)\n```\nAnalyzing temperature\n```{r}\nboxplot(dfweather$temperature~format(dfweather$date,\"%m\"), xlab=\"Months\", ylab=\"Temperature\", main='Temperature analysis')\n```\n```{r}\nboxplot(dfweather$temperature~format(dfweather$date,\"%d\"), xlab=\"Days\", ylab=\"Temperature\")\n```\nAnalysing windSpeed and removing some outiers\n```{r}\n# Removing some outliers\ndfweather<-subset(dfweather, windSpeed<=100)\nboxplot(dfweather$windSpeed~format(dfweather$date,\"%m\"), xlab=\"Months\", ylab=\"WindSpeed\", main='Wind speed analysis')\n```\nAnalysing precipitation\n```{r}\nboxplot(dfweather$precipitation~format(dfweather$date,\"%m\"), xlab=\"Months\", ylab=\"Precipitation\", main='Precipitation analysis')\n```\n\nCombining datasets\n```{r}\ndfflights_new<-left_join(dfweather, dfflights, by = c(\"date\"=\"date\"))\n```\n\nChecking completeness and coherence of data by visual inspection.\n```{r}\n(summary(dfflights_new))\na<-group_by(dfflights_new, id)%>%\n  summarize(count=n()) %>% filter(count>1)\n```\n\n### Answer for Item #3\n\nCreating Training & Test datasets\n\n```{r}\nset.seed(1111)\ndfflights_reduNA<-subset(dfflights_new, !is.na(number_passengers))\ndfflights_onlyNA<-subset(dfflights_new, is.na(number_passengers))\nTdummy<-sample(2, nrow(dfflights_reduNA), replace=T, prob=c(.8,0.2))\ntrain<-dfflights_reduNA[Tdummy==1,]\ntest<-dfflights_reduNA[Tdummy==2,]\n```\n\nAnalyzing the correlation matrix\nDuration and temperature have high correlation with number_passengers and low correlation among both. They are good candidates for independent variables\n```{r}\ncmaux<-matrix(c(train$duration, train$temperature, train$windSpeed, train$precipitation, train$number_passengers),nrow=(nrow(train)), ncol=5)\ncor(cmaux)\n```\n\n#### FIRST APPROACH - linear model considering original dataset\n\nCreating a model with these two independent variables: duration and temperature\n\n```{r}\nmodelAll <- lm(number_passengers~duration+temperature, data=train)\nsummary(modelAll)\nrSquaredAll<-summary(modelAll)$r.squared\n```\n\nAccording to R-squared these variables explain 95.12% of the number_passengers variance.\n\nCreating prediction based on test dataset\n```{r}\n# predict values for test\nresultsAll<-predict(modelAll, newdata=test, type='response')\n(rmseAll<-mean((resultsAll-test$number_passengers)^2)^(1/2))\n```\n\nCross validation (10 folds)\n\n```{r}\nkfoldVal<-suppressWarnings(CVlm(data=train, form.lm=number_passengers~duration+temperature, m=10, seed=1, legend.pos=\"topleft\",  printit=FALSE, main=\"10 folds validation - number_passengers\"))\n# collecting MSE\nmsekfAll<-attr(kfoldVal, 'ms')\n```\n\nMean squared error for this cross validation\n\nMSE of k-fold processing: `r round(msekfAll,4)` \n\n\nScatter graphs are showing an interesting pattern for number_passengers related to duration and temperature. Duration is splitting the dataset in two well defined classes: duration<1.5h and duration>=1.5.\n```{r}\nplot(number_passengers~duration, data=train, main='Two classes based on duration')\nabline(v=1.5, col='red', lwd=3, lty=2)\n```\n```{r}\nplot(number_passengers~temperature, data=train, main='Number of passengers per temperature')\n```\n\nBased on this observation, could be interesting creating models for these two different classes.\n\n#### SECOND APPROACH - Linear model for different classes\n\nFiltering train and test datasets with duration<1.5h\n\n```{r}\ntrainSmaller1.5<-subset(train,duration<(1.5))\ntestSmaller1.5<-subset(test,duration<(1.5))\n```\nPlotting new train dataset\n```{r}\nplot(number_passengers~temperature, data=trainSmaller1.5, main='Temperature for flights with duration<1.5')\nlines(lowess(trainSmaller1.5$number_passengers~trainSmaller1.5$duration+trainSmaller1.5$temperature), col='green')\n```\n\n```{r}\nmodelSmaller1.5 <- lm(number_passengers~duration+temperature, data=trainSmaller1.5)\nsummary(modelSmaller1.5)\n```\n\nPredicting values for test dataset based on this model\n```{r}\nresultsSmaller1.5<-predict(modelSmaller1.5, newdata=testSmaller1.5, type='response')\n# limiting prediction to 100 passengers\nresultsSmaller1.5<-ifelse(resultsSmaller1.5>100, 100, resultsSmaller1.5) \nrmseSmaller1.5<-mean((resultsSmaller1.5-testSmaller1.5$number_passengers)^2)^(1/2)\n```\nCross validation - 10 folds\n```{r}\nkfoldValSmaller<-suppressWarnings(CVlm(data=trainSmaller1.5, form.lm=number_passengers~duration+temperature, m=10, dots=FALSE, seed=1, legend.pos=\"topleft\",  printit=FALSE, main=\"10 folds validation - number_passengers (class: duration<1.5h)\"))\nmsekfSmaller1.5<-attr(kfoldValSmaller, 'ms')\n```\nMean squared error for the cross validation (duration<1.5h)\n\nMSE of k-fold processing: `r round(msekfSmaller1.5,4)` \n\nFiltering train and test datasets with duration<1.5h\n```{r}\ntrainLarger1.5<-subset(train,duration>=(1.5))\ntestLarger1.5<-subset(test,duration>=(1.5))\n```\nPlotting new train dataset\n```{r}\nplot(number_passengers~temperature, data=trainLarger1.5, main='Temperature for flights with duration>=1.5')\nlines(lowess(trainLarger1.5$number_passengers~trainLarger1.5$duration+trainLarger1.5$temperature), col='green')\n```\n\n```{r}\nmodelLarger1.5 <- lm(number_passengers~temperature, data=trainLarger1.5)\nsummary(modelLarger1.5)\n```\nPredicting values for test dataset\n```{r}\nresultsLarger1.5<-predict(modelLarger1.5, newdata=testLarger1.5, type='response')\n# limiting predictions to 50 passengers\nresultsLarger1.5<-ifelse(resultsLarger1.5>50, 50, resultsLarger1.5) \nrmseLarger1.5<-mean((resultsLarger1.5-testLarger1.5$number_passengers)^2)^(1/2)\n```\nCross validation - 10 folds\n```{r}\nkfoldValLarger<-suppressWarnings(CVlm(data=trainLarger1.5, form.lm=number_passengers~temperature, m=10, dots=FALSE, seed=1, legend.pos=\"topleft\",  printit=FALSE, main=\"10 folds validation - number_passengers (class: duration>=1.5h)\"))\nmsekfLarger1.5<-attr(kfoldValLarger, 'ms')\n```\nMean squared error for the cross validation (duration>=1.5h)\n\nMSE of k-fold processing: `r round(msekfLarger1.5,4)` \n\n\nCalculating total rmse based Smaller and Larger datasets\n```{r}\nresultsT<-c(resultsSmaller1.5,resultsLarger1.5)\ntestSmallerT<-c(testSmaller1.5$number_passengers,testLarger1.5$number_passengers)\nrmseT<-mean((resultsT-c(testSmallerT))^2)^(1/2)\nrSquaredT<- sum((resultsT-mean(resultsT))^2)/sum((testSmallerT-mean(testSmallerT))^2)\n```\n\n**Comparing error measurements for both approaches**\n\nRMSE original = `r round(rmseAll, 4)`   \nRMSE after spliting dataset = `r round(rmseT, 4)`   \n\nRMSE duration<1.5h = `r round(rmseSmaller1.5, 4)`   \nRMSE duration>=1.5h = `r round(rmseLarger1.5, 4)`   \n\nMSE after spliting dataset = `r round(msekfAll, 4)`   \nMSE duration<1.5h = `r round(msekfSmaller1.5, 4)`   \nMSE duration>=1.5h = `r round(msekfLarger1.5, 4)`   \n\nsprintf('R-Squared original = `r round(rSquaredAll, 4)`   \nsprintf('R-Squared after spliting dataset = `r round(rSquaredT, 4)`   \n\n#### CONCLUSION ITEM #3\n\nModels created for flights with duration >= 1.5 performed much better than others in terms of MSE and RMSE. For this reason, we decided generating the final prediction based on the second approach. \n\nGenerating dfflights_final dataset including predictoins from the two classes: duration<1.5 and duration>=Larger1.5\n\n```{r}\n#temporary variables\ndfflights_onlyNA_Smaller1.5<-subset(dfflights_onlyNA,duration< (1.5))\ndfflights_onlyNA_Smaller1.5[,6]<-predict(modelSmaller1.5, newdata=dfflights_onlyNA_Smaller1.5, type='response')\n# limiting predictions to 100 passengers\ndfflights_onlyNA_Smaller1.5[,6]<-ifelse(dfflights_onlyNA_Smaller1.5$number_passengers>100, 100, dfflights_onlyNA_Smaller1.5$number_passengers) \n```\n```{r}\n#temporary variables\ndfflights_onlyNA_Larger1.5 <-subset(dfflights_onlyNA,duration>=(1.5))\ndfflights_onlyNA_Larger1.5 [,6]<-predict(modelLarger1.5, newdata=dfflights_onlyNA_Larger1.5, type='response')\n# limiting predictions to 50 passengers\ndfflights_onlyNA_Larger1.5[,6] <-ifelse(dfflights_onlyNA_Larger1.5$number_passengers>50, 50, dfflights_onlyNA_Larger1.5$number_passengers) \n```\nGeneraring dfflights_final\n```{r}\ndfflights_final<-rbind(dfflights_onlyNA_Smaller1.5, dfflights_onlyNA_Larger1.5, dfflights_reduNA)\ndfflights_final[,6]<-round(dfflights_final$number_passengers)\n``` \n\n**********************************************************************************************    \n\n## Answer for ITEM #4\n\nAs mentioned, there are two well defined classes for this study:\n   - Class 1 - flights with duration<1.5h until 100 passengers\n   - Class 2 - flights with duration>=1.5  until 50 passengers\n```{r}\nplot(number_passengers~duration, data=dfflights_final, main='Two classes based on duration')\nabline(v=1.5, col='red', lwd=3, lty=2)\n```\n\nFor flights of Class 1, mean of duration is 1h, max 1.39h, and mean of passengers number around 81.\n```{r}\ndfflights_final_Smaller1.5<-subset(dfflights_final, duration<1.5)\nsummary(dfflights_final_Smaller1.5)\n```\n\nFor flights of Class 2, mean of duration is 2h, max 2.45h, and mean of passengers number around 40.\n\n```{r}\ndfflights_final_Larger1.5<-subset(dfflights_final, duration>=1.5)\nsummary(dfflights_final_Larger1.5)\n```\n\nAggregating datasets by date and counting number of records for both duration<1.5h and duration>=1.5h\n\n```{r}\ndfflights_final_Smaller1.5_aggr<-group_by(dfflights_final_Smaller1.5, date)%>%\n  summarize(count=n())\ndfflights_final_Larger1.5_aggr<-group_by(dfflights_final_Larger1.5, date)%>%\n  summarize(count=n())\n```\n\nThere is a clear linear increasing for the daily number of flights for both classes. The slopes show that the increasing rate is similiar for both.\n\nPlotting flights with duration smaller than 1.5h\n\n```{r} \nplot(dfflights_final_Smaller1.5_aggr, main='Number of flights per day (duration<1.5)')\na<-lm(count~date,data=dfflights_final_Smaller1.5_aggr)\nabline(a, col='red')\n```\nCoefficients for this linear model\n```{r}\nsummary(a)\n```\nPrediction until 2020\nCalculating fina number of flights based on this trend.\nClass 1 - duration<1.5h\n```{r}\n# until 2020\nnewdates<-data.frame(date=seq.POSIXt(from=ISOdate(2016,01,01), to=ISOdate(2020,12,31), by=\"day\"))\naa<-predict(a, newdata=newdates)\ntail(aa)\n```\n\nPlotting flights with duration bigger than 1.5h\n\n```{r}\nplot(dfflights_final_Larger1.5_aggr, main='Number of flights per day (duration>=1.5)')\nb<-lm(count~.,data=dfflights_final_Larger1.5_aggr)\nabline(b, col='red')\n```\nCoefficients for this linear model\n```{r}\nsummary(b)\n```\nPrediction until 2020\nCalculating fina number of flights based on this trend.\nClass 2 - duration>=1.5h\n```{r}\n# until 2020\nbb<-predict(b, newdata=newdates)\ntail(bb)\n```\n\nFrequency of flights per day in 2015\n\n```{r}\na<-subset(dfflights_final_Smaller1.5_aggr, date>'2015-01-01')\nhist(a$count, main='Frequency of flights with duration <1.5h (Year: 2015)')\n```\nIt means around 12 trips per day \nWe will considering ~3.5hours per round trip\n\n```{r}\na<-subset(dfflights_final_Larger1.5_aggr, date>'2015-01-01')\nhist(a$count, main='Frequency of flights with duration >=1.5h (Year: 2015)')\n```\nAround 11 trips per day \n\nBased on these last arguments, we can conclude.    \n\n#### CONCLUSION ITEM #4:     \n\n**Suggested fleet:    **    \n\n**2 aircrafts type A (capacity: 100 passengers, autonomy:1.5h)    **    \n    until 13 trips per day (until 2020)      \n    7 round trip by day >> 2 aircarfts     \n    3 round trip per aircraft per day    \n      ~3.5hours per round trip    \n      ~4000 flights per year     \n\n**2 aircrafts type B (capacity 50 passengers, autonomy: 2.5h)    **    \n    until 13 trips per day (until 2020)      \n    7 round trip by day >> 2 aircarfts     \n    3 round trip per aircraft per day     \n      ~3.5hours per round trip     \n      ~3700 flights per year     \n\nCertainly, several other data could be used for improving this estimative.     \n(e.g. scheduled maintenances, maximmum trips per day per aircraft, costs per trip per aircraft, revenue per trip per aircraft, different destinations with different distances, demand per destinations, etc.)    \n\nAlso, for sure there is space for applying optimization techniques.    ",
    "created" : 1525314717871.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3644471253",
    "id" : "675B1CB5",
    "lastKnownWriteTime" : 1525347315,
    "last_content_update" : 1525347315706,
    "path" : "C:/Users/310178934/Data Analysis/R scripts & templates/Safran challenge note.Rmd",
    "project_path" : "Safran challenge note.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}